#!/usr/bin/env bash

#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail
if [[ -n "${CI:-}" ]]; then
	set -o xtrace
fi

-h() { help; }
help() {
	echo 'Please see the manage script source for available tasks.' >&2
}

# TODO: Hitting Ctrl-c in middle of a job doesn't cancel.

###
# Backend targets
###

serve-backend() {
	ensure-venv
	source venv/bin/activate
	cd backend
	PRESTIGE_ENV=development PYTHONUTF8=1 PYTHONUNBUFFERED=1 exec python manage.py runserver 127.0.0.1:3041
}

build-backend() (
	ensure-venv
	source venv/bin/activate
	cd backend
	PRESTIGE_ENV=manage DATABASE_URL='sqlite://:memory:' python manage.py collectstatic --clear --no-input
	python -m compileall -f .
)

lint-backend() {
	ensure-venv
	(
		source venv/bin/activate
		if [[ ! -f venv/bin/flake8 ]]; then
			pip install flake8
		fi
		cd backend
		flake8 . --extend-exclude venv --select=E9,F63,F7,F82 --show-source --statistics
	)
}

test-backend() {
	ensure-venv
	(
		source venv/bin/activate
		cd backend
		PRESTIGE_ENV="test" coverage run --source=. manage.py test
		coverage report
	)
}

changepassword() {
	ensure-venv
	(
		source venv/bin/activate
		cd backend
		PRESTIGE_ENV="development" PYTHONUTF8=1 python manage.py "$@" "$(read -e -r -p 'Email: '; echo "$REPLY")"
	)
}

makemigrations() {
	ensure-venv
	(
		source venv/bin/activate
		cd backend
		PRESTIGE_ENV="development" PYTHONUTF8=1 python manage.py makemigrations
	)
}

migrate() {
	ensure-venv
	(
		source venv/bin/activate
		cd backend
		PRESTIGE_ENV="development" PYTHONUTF8=1 python manage.py migrate
	)
}

resetdb() {
	rm -fv backend/db.sqlite3
	migrate
	echo '*** Creating super user ***'
	(
		source venv/bin/activate
		cd backend
		PRESTIGE_ENV="development" PYTHONUTF8=1 python manage.py createsuperuser
	)
}

###
# Frontend targets
###

serve-frontend() {
	cd frontend
	NODE_ENV=development exec npx parcel serve src/index.html --dist-dir dist-serve --port 3040
}

build-frontend() (
	cd frontend
	NODE_ENV="production" PRESTIGE_BACKEND=${PRESTIGE_BACKEND:-} \
		npx parcel build src/index.html --dist-dir dist --no-autoinstall --no-source-maps --no-cache
)

lint-frontend() {
	ensure-node_modules frontend
	(
		cd frontend
		npx tsc --noEmit --project .
		npx eslint --report-unused-disable-directives src
	)
}

test-frontend() (
	ensure-node_modules frontend
	cd frontend
	npx jest
)

update-browserslist() (
	cd frontend
	npx browserslist@latest --update-db
)

###
# Documentation
###

serve-docs() {
	ensure-venv
	source venv/bin/activate
	cd docs
	PYTHONPATH=. exec mkdocs serve --dev-addr "127.0.0.1:${PORT:-3042}"
}

build-docs() (
	ensure-venv
	source venv/bin/activate
	cd docs
	PYTHONPATH=. mkdocs build
)

###
# End-to-end Testing
###

test-e2e() (
	ensure-venv
	ensure-node_modules e2e-tests
	rm -rf e2e-tests/{logs,trail}
	source venv/bin/activate
	cd e2e-tests
	time python3 run.py
)

###
# Miscellaneous / Project-wide targets
###

ensure-venv() {
	if [[ -f venv/make_sentinel && -f venv/bin/pip-compile && requirements.in -ot venv/make_sentinel && requirements.txt -ot venv/make_sentinel && requirements-dev.txt -ot venv/make_sentinel ]]; then
		return
	fi
	if [[ ! -d venv ]]; then
		python3 -m venv --prompt prestige venv
	fi
	(
		source venv/bin/activate
		pip install pip-tools
		pip-compile requirements.in
		pip install -r requirements.txt
		pip install -r requirements-dev.txt
	)
	touch venv/make_sentinel
}

ensure-node_modules() {
	at="$1"
	if [[ -e $at/node_modules/make_sentinel && $at/package.json -ot $at/node_modules/make_sentinel && $at/yarn.lock -ot $at/node_modules/make_sentinel ]]; then
		return
	fi
	if ! type yarn; then npm install -g yarn; fi
	if [[ $at/package.json -nt $at/yarn.lock ]]; then
		(cd "$at" && yarn install)
	else
		(cd "$at" && yarn install --frozen-lockfile)
	fi
	touch "$at/node_modules/make_sentinel"
}

test-all() {
	lint-frontend
	test-frontend
	# lint-backend
	test-backend
	test-e2e
}

outdated() (
	cd frontend
	yarn outdated
)

deps() {
	ensure-venv
	ensure-node_modules frontend
	ensure-node_modules e2e-tests
}

upgrade-deps() (
	# TODO: Don't attempt stop/start frontend, if isn't already running.
	cd frontend
	../venv/bin/supervisorctl stop prestige:frontend
	yarn upgrade --latest
	../venv/bin/supervisorctl start prestige:frontend
	# TODO: Upgrade dependencies for backend as well.
)

start() (
	ensure-venv
	if [[ -e supervisord.pid ]]; then
		if ! curl -sS localhost:3044 >&/dev/null; then
			echo "Looks like an unclean exit was done. Cleaning up and trying to start again."
			rm supervisord.pid
			start
			return
		fi
		echo 'Already running.'
	else
		if [[ -f dev.env ]]; then
			set -a
			source dev.env
			set +a
		fi
		mkdir -pv logs
		venv/bin/supervisord
		echo 'Just started.'
	fi
	echo -e 'App available at <http://localhost:3040>.\nProcess monitor at <http://localhost:3044>.'
)

stop() (
	ensure-venv
	if [[ -e supervisord.pid ]]; then
		kill "$(venv/bin/supervisorctl pid)"
		echo 'Just stopped.'
		sleep 2s
	else
		echo 'Already stopped.'
	fi
)

restart() {
	stop
	start
}

build-all() (
	build-frontend
	build-backend
	build-docs
	test ! -d package
	mkdir -pv package
	# Copy favicon to hashless filename for docs to show the favicon.
	cp frontend/dist/favicon.*.ico frontend/dist/favicon.ico
	mv backend/static frontend/dist/
	mv docs/site frontend/dist/docs
	mv frontend/dist package/webroot
	cp -r backend package/
	cp -v requirements.txt package/
	find package/backend -type d -name __pycache__ -print -exec rm -rf '{}' ';' -prune
	rm -rf package/backend/.mypy_cache
	cd package
	tar -caf ../package.tar.gz ./*
	du -sh package package.tar.gz || true
	rm -rf package
)

upload-package() (
	aws s3 cp package.tar.gz s3://ssk-artifacts/prestige-package.tar.gz
)

cd "$(dirname "$0")"
"$@"
